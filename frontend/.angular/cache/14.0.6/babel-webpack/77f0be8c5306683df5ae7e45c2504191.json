{"ast":null,"code":"import parse, { is_viable_phone_number } from './parse';\nimport get_number_type, { sort_out_arguments } from './types';\nimport { get_types } from './metadata'; // Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\n\nexport default function is_valid(arg_1, arg_2, arg_3) {\n  var _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3),\n      input = _sort_out_arguments.input,\n      metadata = _sort_out_arguments.metadata;\n\n  if (!input) {\n    return false;\n  }\n\n  if (!input.country) {\n    return false;\n  }\n\n  var country_metadata = metadata.countries[input.country];\n\n  if (get_types(country_metadata)) {\n    if (!get_number_type(input, metadata)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["parse","is_viable_phone_number","get_number_type","sort_out_arguments","get_types","is_valid","arg_1","arg_2","arg_3","_sort_out_arguments","input","metadata","country","country_metadata","countries"],"sources":["/usr/src/app/node_modules/libphonenumber-js/es6/validate.js"],"sourcesContent":["import parse, { is_viable_phone_number } from './parse';\nimport get_number_type, { sort_out_arguments } from './types';\n\nimport { get_types } from './metadata';\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(arg_1, arg_2, arg_3) {\n\tvar _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3),\n\t    input = _sort_out_arguments.input,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tif (!input) {\n\t\treturn false;\n\t}\n\n\tif (!input.country) {\n\t\treturn false;\n\t}\n\n\tvar country_metadata = metadata.countries[input.country];\n\n\tif (get_types(country_metadata)) {\n\t\tif (!get_number_type(input, metadata)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,sBAAhB,QAA8C,SAA9C;AACA,OAAOC,eAAP,IAA0BC,kBAA1B,QAAoD,SAApD;AAEA,SAASC,SAAT,QAA0B,YAA1B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;EACrD,IAAIC,mBAAmB,GAAGN,kBAAkB,CAACG,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAA5C;EAAA,IACIE,KAAK,GAAGD,mBAAmB,CAACC,KADhC;EAAA,IAEIC,QAAQ,GAAGF,mBAAmB,CAACE,QAFnC;;EAIA,IAAI,CAACD,KAAL,EAAY;IACX,OAAO,KAAP;EACA;;EAED,IAAI,CAACA,KAAK,CAACE,OAAX,EAAoB;IACnB,OAAO,KAAP;EACA;;EAED,IAAIC,gBAAgB,GAAGF,QAAQ,CAACG,SAAT,CAAmBJ,KAAK,CAACE,OAAzB,CAAvB;;EAEA,IAAIR,SAAS,CAACS,gBAAD,CAAb,EAAiC;IAChC,IAAI,CAACX,eAAe,CAACQ,KAAD,EAAQC,QAAR,CAApB,EAAuC;MACtC,OAAO,KAAP;IACA;EACD;;EAED,OAAO,IAAP;AACA"},"metadata":{},"sourceType":"module"}