{"ast":null,"code":"export function get_phone_code(country_metadata) {\n  return country_metadata[0];\n}\nexport function get_national_number_pattern(country_metadata) {\n  return country_metadata[1];\n}\nexport function get_formats(country_metadata) {\n  return country_metadata[2] || [];\n}\nexport function get_national_prefix(country_metadata) {\n  return country_metadata[3];\n}\nexport function get_national_prefix_formatting_rule(country_metadata) {\n  return country_metadata[4];\n}\nexport function get_national_prefix_for_parsing(country_metadata) {\n  var national_prefix_for_parsing = country_metadata[5]; // If `national_prefix_for_parsing` is not set explicitly,\n  // then infer it from `national_prefix` (if any)\n\n  if (!national_prefix_for_parsing) {\n    national_prefix_for_parsing = get_national_prefix(country_metadata);\n  }\n\n  return national_prefix_for_parsing;\n}\nexport function get_national_prefix_transform_rule(country_metadata) {\n  return country_metadata[6];\n}\nexport function get_national_prefix_is_optional_when_formatting(country_metadata) {\n  return country_metadata[7];\n}\nexport function get_leading_digits(country_metadata) {\n  return country_metadata[8];\n}\nexport function get_format_pattern(format_array) {\n  return format_array[0];\n}\nexport function get_format_format(format_array) {\n  return format_array[1];\n}\nexport function get_format_leading_digits_patterns(format_array) {\n  return format_array[2] || [];\n}\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata) {\n  return format_array[3] || get_national_prefix_formatting_rule(country_metadata);\n}\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata) {\n  return format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata);\n}\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata) {\n  var national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata); // National prefix is omitted if there's no national prefix formatting rule\n  // set for this country, or when the national prefix formatting rule\n  // contains no national prefix itself, or when this rule is set but\n  // national prefix is optional for this phone number format\n  // (and it is not enforced explicitly)\n\n  return national_prefix_formatting_rule && // Check that national prefix formatting rule is not a dummy one.\n  // Check that national prefix formatting rule actually has national prefix digit(s).\n  get_format_uses_national_prefix(national_prefix_formatting_rule) && // Or maybe national prefix is optional for this format\n  !get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata);\n} // Checks whether national prefix formatting rule contains national prefix\n\nexport function get_format_uses_national_prefix(national_prefix_formatting_rule) {\n  // Check that national prefix formatting rule is not a dummy one\n  return national_prefix_formatting_rule !== '$1' && // Check that national prefix formatting rule actually has national prefix digit(s)\n  /\\d/.test(national_prefix_formatting_rule.replace('$1', ''));\n}\nexport function get_format_international_format(format_array) {\n  return format_array[5] || get_format_format(format_array);\n} // Formatting information for regions which share\n// a country calling code is contained by only one region\n// for performance reasons. For example, for NANPA region\n// (\"North American Numbering Plan Administration\",\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n// it will be contained in the metadata for `US`.\n\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata) {\n  var country_code = metadata.country_phone_code_to_countries[country_phone_code][0];\n  return metadata.countries[country_code];\n}\nexport function get_types(country_metadata) {\n  return country_metadata[9];\n}\n\nfunction get_type(country_metadata, index) {\n  return get_types(country_metadata) ? get_types(country_metadata)[index] : undefined;\n}\n\nexport function get_type_fixed_line(country_metadata) {\n  return get_type(country_metadata, 0);\n}\nexport function get_type_mobile(country_metadata) {\n  return get_type(country_metadata, 1);\n}\nexport function get_type_toll_free(country_metadata) {\n  return get_type(country_metadata, 2);\n}\nexport function get_type_premium_rate(country_metadata) {\n  return get_type(country_metadata, 3);\n}\nexport function get_type_personal_number(country_metadata) {\n  return get_type(country_metadata, 4);\n}\nexport function get_type_voice_mail(country_metadata) {\n  return get_type(country_metadata, 5);\n}\nexport function get_type_uan(country_metadata) {\n  return get_type(country_metadata, 6);\n}\nexport function get_type_pager(country_metadata) {\n  return get_type(country_metadata, 7);\n}\nexport function get_type_voip(country_metadata) {\n  return get_type(country_metadata, 8);\n}\nexport function get_type_shared_cost(country_metadata) {\n  return get_type(country_metadata, 9);\n}\nexport function get_country_phone_code(country, country_metadata) {\n  return get_phone_code(country_metadata[country]);\n}","map":{"version":3,"names":["get_phone_code","country_metadata","get_national_number_pattern","get_formats","get_national_prefix","get_national_prefix_formatting_rule","get_national_prefix_for_parsing","national_prefix_for_parsing","get_national_prefix_transform_rule","get_national_prefix_is_optional_when_formatting","get_leading_digits","get_format_pattern","format_array","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_national_prefix_is_mandatory_when_formatting","national_prefix_formatting_rule","get_format_uses_national_prefix","test","replace","get_format_international_format","get_metadata_by_country_phone_code","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_types","get_type","index","undefined","get_type_fixed_line","get_type_mobile","get_type_toll_free","get_type_premium_rate","get_type_personal_number","get_type_voice_mail","get_type_uan","get_type_pager","get_type_voip","get_type_shared_cost","get_country_phone_code","country"],"sources":["/usr/src/app/node_modules/libphonenumber-js/es6/metadata.js"],"sourcesContent":["export function get_phone_code(country_metadata) {\n\treturn country_metadata[0];\n}\n\nexport function get_national_number_pattern(country_metadata) {\n\treturn country_metadata[1];\n}\n\nexport function get_formats(country_metadata) {\n\treturn country_metadata[2] || [];\n}\n\nexport function get_national_prefix(country_metadata) {\n\treturn country_metadata[3];\n}\n\nexport function get_national_prefix_formatting_rule(country_metadata) {\n\treturn country_metadata[4];\n}\n\nexport function get_national_prefix_for_parsing(country_metadata) {\n\tvar national_prefix_for_parsing = country_metadata[5];\n\n\t// If `national_prefix_for_parsing` is not set explicitly,\n\t// then infer it from `national_prefix` (if any)\n\tif (!national_prefix_for_parsing) {\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata);\n\t}\n\n\treturn national_prefix_for_parsing;\n}\n\nexport function get_national_prefix_transform_rule(country_metadata) {\n\treturn country_metadata[6];\n}\n\nexport function get_national_prefix_is_optional_when_formatting(country_metadata) {\n\treturn country_metadata[7];\n}\n\nexport function get_leading_digits(country_metadata) {\n\treturn country_metadata[8];\n}\n\nexport function get_format_pattern(format_array) {\n\treturn format_array[0];\n}\n\nexport function get_format_format(format_array) {\n\treturn format_array[1];\n}\n\nexport function get_format_leading_digits_patterns(format_array) {\n\treturn format_array[2] || [];\n}\n\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata) {\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata);\n}\n\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata) {\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata);\n}\n\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata) {\n\tvar national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata);\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when the national prefix formatting rule\n\t// contains no national prefix itself, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\treturn national_prefix_formatting_rule &&\n\t// Check that national prefix formatting rule is not a dummy one.\n\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\tget_format_uses_national_prefix(national_prefix_formatting_rule) &&\n\t// Or maybe national prefix is optional for this format\n\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata);\n}\n\n// Checks whether national prefix formatting rule contains national prefix\nexport function get_format_uses_national_prefix(national_prefix_formatting_rule) {\n\t// Check that national prefix formatting rule is not a dummy one\n\treturn national_prefix_formatting_rule !== '$1' &&\n\t// Check that national prefix formatting rule actually has national prefix digit(s)\n\t/\\d/.test(national_prefix_formatting_rule.replace('$1', ''));\n}\n\nexport function get_format_international_format(format_array) {\n\treturn format_array[5] || get_format_format(format_array);\n}\n\n// Formatting information for regions which share\n// a country calling code is contained by only one region\n// for performance reasons. For example, for NANPA region\n// (\"North American Numbering Plan Administration\",\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n// it will be contained in the metadata for `US`.\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata) {\n\tvar country_code = metadata.country_phone_code_to_countries[country_phone_code][0];\n\treturn metadata.countries[country_code];\n}\n\nexport function get_types(country_metadata) {\n\treturn country_metadata[9];\n}\n\nfunction get_type(country_metadata, index) {\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined;\n}\n\nexport function get_type_fixed_line(country_metadata) {\n\treturn get_type(country_metadata, 0);\n}\n\nexport function get_type_mobile(country_metadata) {\n\treturn get_type(country_metadata, 1);\n}\n\nexport function get_type_toll_free(country_metadata) {\n\treturn get_type(country_metadata, 2);\n}\n\nexport function get_type_premium_rate(country_metadata) {\n\treturn get_type(country_metadata, 3);\n}\n\nexport function get_type_personal_number(country_metadata) {\n\treturn get_type(country_metadata, 4);\n}\n\nexport function get_type_voice_mail(country_metadata) {\n\treturn get_type(country_metadata, 5);\n}\n\nexport function get_type_uan(country_metadata) {\n\treturn get_type(country_metadata, 6);\n}\n\nexport function get_type_pager(country_metadata) {\n\treturn get_type(country_metadata, 7);\n}\n\nexport function get_type_voip(country_metadata) {\n\treturn get_type(country_metadata, 8);\n}\n\nexport function get_type_shared_cost(country_metadata) {\n\treturn get_type(country_metadata, 9);\n}\n\nexport function get_country_phone_code(country, country_metadata) {\n\treturn get_phone_code(country_metadata[country]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}